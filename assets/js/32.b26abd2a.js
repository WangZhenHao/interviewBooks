(window.webpackJsonp=window.webpackJsonp||[]).push([[32],{316:function(t,e,s){"use strict";s.r(e);var a=s(14),r=Object(a.a)({},(function(){var t=this,e=t._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"vue面试参考问题"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#vue面试参考问题"}},[t._v("#")]),t._v(" vue面试参考问题")]),t._v(" "),e("h3",{attrs:{id:"_1-vue组件间的通讯有那些"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-vue组件间的通讯有那些"}},[t._v("#")]),t._v(" 1.vue组件间的通讯有那些")]),t._v(" "),e("p",[t._v("（1）props / $emit 适用 父子组件通信")]),t._v(" "),e("p",[t._v("这种方法是 Vue 组件的基础，相信大部分同学耳闻能详，所以此处就不举例展开介绍。")]),t._v(" "),e("p",[t._v("（2）ref 与 $parent / $children 适用 父子组件通信")]),t._v(" "),e("p",[t._v("ref：如果在普通的 DOM 元素上使用，引用指向的就是 DOM 元素；如果用在子组件上，引用就指向组件实例\n$parent / $children：访问父 / 子实例")]),t._v(" "),e("p",[t._v("(3) EventBus （$emit / $on） 适用于 父子、隔代、兄弟组件通信")]),t._v(" "),e("p",[t._v("这种方法通过一个空的 Vue 实例作为中央事件总线（事件中心），用它来触发事件和监听事件，从而实现任何组件间的通信，包括父子、隔代、兄弟组件")]),t._v(" "),e("p",[t._v("（4）$attrs/$listeners 适用于 隔代组件通信")]),t._v(" "),e("p",[t._v('$attrs：包含了父作用域中不被 prop 所识别 (且获取) 的特性绑定 ( class 和 style 除外 )。当一个组件没有声明任何 prop 时，这里会包含所有父作用域的绑定 ( class 和 style 除外 )，并且可以通过 v-bind="$attrs" 传入内部组件。通常配合 inheritAttrs 选项一起使用。\n$listeners：包含了父作用域中的 (不含 .native 修饰器的)  v-on 事件监听器。它可以通过 v-on="$listeners" 传入内部组件')]),t._v(" "),e("p",[t._v("（5）provide / inject 适用于 隔代组件通信\n祖先组件中通过 provider 来提供变量，然后在子孙组件中通过 inject 来注入变量。 provide / inject API 主要解决了跨级组件间的通信问题，不过它的使用场景，主要是子组件获取上级组件的状态，跨级组件间建立了一种主动提供与依赖注入的关系。")]),t._v(" "),e("p",[t._v("（6）Vuex  适用于 父子、隔代、兄弟组件通信\nVuex 是一个专为 Vue.js 应用程序开发的状态管理模式。每一个 Vuex 应用的核心就是 store（仓库）。“store” 基本上就是一个容器，它包含着你的应用中大部分的状态 ( state )。")]),t._v(" "),e("p",[t._v("Vuex 的状态存储是响应式的。当 Vue 组件从 store 中读取状态的时候，若 store 中的状态发生变化，那么相应的组件也会相应地得到高效更新。\n改变 store 中的状态的唯一途径就是显式地提交  (commit) mutation。这样使得我们可以方便地跟踪每一个状态的变化。")]),t._v(" "),e("h3",{attrs:{id:"_2-watch和computed的区别"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-watch和computed的区别"}},[t._v("#")]),t._v(" 2.watch和computed的区别")]),t._v(" "),e("p",[t._v("computed： 是计算属性，依赖其它属性值，并且 computed 的值有缓存，只有它依赖的属性值发生改变，下一次获取 computed 的值时才会重新计算 computed  的值；\nwatch： 更多的是「观察」的作用，类似于某些数据的监听回调 ，每当监听的数据变化时都会执行回调进行后续操作")]),t._v(" "),e("p",[t._v("当我们需要进行数值计算，并且依赖于其它数据时，应该使用 computed，因为可以利用 computed 的缓存特性，避免每次获取值时，都要重新计算；")]),t._v(" "),e("p",[t._v("当我们需要在数据变化时执行异步或开销较大的操作时，应该使用 watch，使用 watch 选项允许我们执行异步操作 ( 访问一个 API )，限制我们执行该操作的频率，并在我们得到最终结果前，设置中间状态。这些都是计算属性无法做到的。")]),t._v(" "),e("h3",{attrs:{id:"_3-组件中-data-为什么是一个函数"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-组件中-data-为什么是一个函数"}},[t._v("#")]),t._v(" 3.组件中 data 为什么是一个函数")]),t._v(" "),e("p",[t._v("因为组件是用来复用的，且 JS 里对象是引用关系，如果组件中 data 是一个对象，那么这样作用域没有隔离，子组件中的 data 属性值会相互影响，如果组件中 data 选项是一个函数，那么每个实例可以维护一份被返回对象的独立的拷贝，组件实例之间的 data 属性值不会互相影响；而 new Vue 的实例，是不会被复用的，因此不存在引用对象的问题。\n。")]),t._v(" "),e("h3",{attrs:{id:"_4-说说vuex"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-说说vuex"}},[t._v("#")]),t._v(" 4. 说说vuex")]),t._v(" "),e("p",[t._v("Vuex 是一个专为 Vue.js 应用程序开发的状态管理模式。每一个 Vuex 应用的核心就是 store（仓库）。“store” 基本上就是一个容器，它包含着你的应用中大部分的状态 ( state )。\n（1）Vuex 的状态存储是响应式的。当 Vue 组件从 store 中读取状态的时候，若 store 中的状态发生变化，那么相应的组件也会相应地得到高效更新。\n（2）改变 store 中的状态的唯一途径就是显式地提交 (commit) mutation。这样使得我们可以方便地跟踪每一个状态的变化。\n主要包括以下几个模块：")]),t._v(" "),e("p",[t._v("State：定义了应用状态的数据结构，可以在这里设置默认的初始状态。")]),t._v(" "),e("p",[t._v("Getter：允许组件从 Store 中获取数据，mapGetters 辅助函数仅仅是将 store 中的")]),t._v(" "),e("p",[t._v("getter 映射到局部计算属性。")]),t._v(" "),e("p",[t._v("Mutation：是唯一更改 store 中状态的方法，且必须是同步函数。")]),t._v(" "),e("p",[t._v("Action：用于提交 mutation，而不是直接变更状态，可以包含任意异步操作。")]),t._v(" "),e("p",[t._v("Module：允许将单一的 Store 拆分为多个 store 且同时保存在单一的状态树中。")]),t._v(" "),e("h3",{attrs:{id:"_5-vue-router-路由模式有几种"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_5-vue-router-路由模式有几种"}},[t._v("#")]),t._v(" 5.vue-router 路由模式有几种？")]),t._v(" "),e("p",[t._v("vue-router 有 3 种路由模式：hash、history、abstract，对应的源码如下所示")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("switch (mode) {\n  case 'history':\n\tthis.history = new HTML5History(this, options.base)\n\tbreak\n  case 'hash':\n\tthis.history = new HashHistory(this, options.base, this.fallback)\n\tbreak\n  case 'abstract':\n\tthis.history = new AbstractHistory(this, options.base)\n\tbreak\n  default:\n\tif (process.env.NODE_ENV !== 'production') {\n\t  assert(false, `invalid mode: ${mode}`)\n\t}\n}\n\n")])])]),e("p",[t._v("其中，3 种路由模式的说明如下：")]),t._v(" "),e("p",[t._v("hash:  使用 URL hash 值来作路由。支持所有浏览器，包括不支持 HTML5 History Api 的浏览器；")]),t._v(" "),e("p",[t._v("history :  依赖 HTML5 History API 和服务器配置。具体可以查看 HTML5 History 模式；")]),t._v(" "),e("p",[t._v("abstract :  支持所有 JavaScript 运行环境，如 Node.js 服务器端。如果发现没有浏览器的 API，路由会自动强制进入这个模式.")]),t._v(" "),e("h3",{attrs:{id:"_5-vue-中的-key-有什么作用"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_5-vue-中的-key-有什么作用"}},[t._v("#")]),t._v(" 5.Vue 中的 key 有什么作用？")]),t._v(" "),e("p",[t._v("更准确：因为带 key 就不是就地复用了，在 sameNode 函数 a.key === b.key 对比中可以避免就地复用的情况。所以会更加准确。")]),t._v(" "),e("p",[t._v("更快速：利用 key 的唯一性生成 map 对象来获取对应节点，比遍历方式更快")])])}),[],!1,null,null,null);e.default=r.exports}}]);