(window.webpackJsonp=window.webpackJsonp||[]).push([[20],{264:function(t,s,a){"use strict";a.r(s);var e=a(28),n=Object(e.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"typescript考点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#typescript考点"}},[t._v("#")]),t._v(" typeScript考点")]),t._v(" "),a("h3",{attrs:{id:"_1-typescript有哪些基础类型？"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-typescript有哪些基础类型？"}},[t._v("#")]),t._v(" 1:Typescript有哪些基础类型？")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("：number\n\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("：string\n\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v("：boolean\n\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),t._v("：Symbol\n\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),t._v("：Array\n\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("6")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("：Tuple")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("元组"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("7")]),t._v("："),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("enum")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("枚举"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("8")]),t._v("：object\n\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("9")]),t._v("：never\n\n表示那些永不存在的值类型。如总是抛出异常或者根本不会有返回值的函数的返回值类型。\n\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),t._v("："),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v("\n\n与any相反表示没有任何类型。函数没有返回值时用"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v("。\n\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("11")]),t._v("："),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v("和"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("undefined")]),t._v("\n\n它们是所有类型的子类型。当你指定structNullChecks时，它们只能赋值给"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v("或者它们自己本身。\n\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("12")]),t._v("：any\n\n")])])]),a("h3",{attrs:{id:"_2-如何理解typescript中的类？并说说它有什么特性？"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-如何理解typescript中的类？并说说它有什么特性？"}},[t._v("#")]),t._v(" 2.如何理解Typescript中的类？并说说它有什么特性？")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("Typescript是一种面向对象的Javascript语言，和其他任何面向对象编程的强语言一样，类是描述某一组对象共有属性状态或行为的实体。它就是构建具体对象实例的模板和蓝图。\n\n特性：\n\n1：继承\n\n2：多态\n\n3：抽象\n\n4：封装\n\n5：实例\n\n")])])]),a("h3",{attrs:{id:"_3-说说什么typescript中的泛型？作用是什么？"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-说说什么typescript中的泛型？作用是什么？"}},[t._v("#")]),t._v(" 3.说说什么Typescript中的泛型？作用是什么？")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("泛型代表的是泛指某一类型，更像是一个类型变量。由尖括号包裹<T>。\n主要作用是创建逻辑可复用的组件。\n泛型可以作用在函数、类、接口上。\n\n")])])]),a("h3",{attrs:{id:"_4-说说接口和类型别名type的区别？"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-说说接口和类型别名type的区别？"}},[t._v("#")]),t._v(" 4.说说接口和类型别名type的区别？")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("他们很相似，type可以作用于原始值，联合类型，元组以及其它任何你需要手写的类型。\n\n区别一：它并不会真的创建一个新的名字，当你在编译器上将鼠标悬停在定义为该类型别名定义的变量上时返回的是该类型别名引用的对象。\n相反，接口会创建一个新名字 ，当你把鼠标悬停在该接口定义的变量上时返回的是该接口名。\n\n区别二：类型别名不能extends和implements\n\n区别三：对于元组，联合类型我们一般使用类型别名type。\n\n")])])]),a("h3",{attrs:{id:"_5-typescript联合类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-typescript联合类型"}},[t._v("#")]),t._v(" 5.TypeScript联合类型")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('联合类型表示取值可以为多种类型中的一种\n\nvar muchtype:string|number = "hello";\nmuchtype = 1;\n')])])]),a("h3",{attrs:{id:"_6-typescript-元组"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-typescript-元组"}},[t._v("#")]),t._v(" 6.TypeScript 元组")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("我们知道数组中元素的数据类型都一般是相同的（any[] 类型的数组可以不同），如果存储的元素数据类型不同，则需要使用元组。\n元组中允许存储不同类型的元素，元组可以作为参数传递给函数。\n")])])])])}),[],!1,null,null,null);s.default=n.exports}}]);